.program ccsctrl
.side_set 1 opt

set pindirs, 0
.wrap_target
start:
  wait 0 GPIO 15            ; wait for PHI2 to go low
  wait 1 GPIO 15  side 0    ; wait for PHI2 to go high
  wait 1 GPIO 0             ; wait for CPU ready
  jmp PIN out_mode          ; R/W pin

  MOV x,x [7]
  MOV x,x [7]
  MOV x,x [7]
  MOV x,x [7]
  MOV x,x [7]

  IN pins, 8      side 1
  jmp start

out_mode:
  MOV x,x [7]
  MOV x,x [7]
  MOV x,x [7]
  MOV x,x [7]
  MOV x,x [7]
  IN pins, 8      side 1
  .wrap

% c-sdk {
static inline void ccsctrl_program_init(PIO pio, uint sm, uint offset, uint pin) {
  // 1. Define a config object
  pio_sm_config config = ccsctrl_program_get_default_config(offset);
  // 2. Set and initialize the input pins

  sm_config_set_in_pins(&config, pin);

  pio_sm_set_consecutive_pindirs(pio, sm, pin, 8, false); // input
  pio_sm_set_consecutive_pindirs(pio, sm, 27, 1, true);
  for (int i = 0; i < 8; i++)
  {
    pio_gpio_init(pio, pin + i);  
  }
  pio_gpio_init(pio, 27);
  pio_gpio_init(pio, 16);

  sm_config_set_in_shift(&config, false, true, 8);
  sm_config_set_fifo_join(&config, PIO_FIFO_JOIN_RX);

  sm_config_set_sideset_pins(&config, 27);
  sm_config_set_jmp_pin(&config, 16);  // pin 16 is RW - for jmp

  //sm_config_set_clkdiv(&config, 2);

  // 3. Apply the configuration & activate the State Machine
  pio_sm_init(pio, sm, offset, &config);
  //pio_sm_set_enabled(pio, sm, true);
}
%}