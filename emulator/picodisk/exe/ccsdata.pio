; 133 MHz

.program ccsdata
.side_set 1 opt

set pindirs, 0
.wrap_target
start:
  wait 1 GPIO 27        ; wait for addr read to go high 
  jmp PIN out_mode      ; R/W pin

in_mode:
  in pins, 8        ; side 1  
  wait 0 GPIO 15    
  jmp start         ; side 0

out_mode:
  set pindirs, 1            ; within tDSR period of 6502
  jmp !OSRE out_mode_start  ; only continue of there is something in the OSRE
  jmp start

out_mode_start:
  out pins, 8       side 1
  wait 0 GPIO 15    
  set pindirs, 0    side 0     ; quit asserting data pins
  .wrap             

% c-sdk {
static inline void ccsdata_program_init(PIO pio, uint sm, uint offset, uint pin) {
  // 1. Define a config object
  pio_sm_config config = ccsdata_program_get_default_config(offset);
  // 2. Set and initialize the input pins

  pio_sm_set_consecutive_pindirs(pio, sm, pin, 8, 1);
  pio_sm_set_consecutive_pindirs(pio, sm, 26, 1, true);

  for (int i = 0; i < 8; i++)
  {
    pio_gpio_init(pio, pin + i);
  }
  
  pio_gpio_init(pio, 26);
  gpio_pull_down(26);

  pio_gpio_init(pio, 16);

  sm_config_set_jmp_pin(&config, 16);  // pin 16 is RW - for jmp
  sm_config_set_out_pins(&config, pin, 8); // for out
  sm_config_set_in_pins(&config, pin);

  sm_config_set_out_shift(&config, true, true, 8);
  sm_config_set_in_shift(&config, false, true, 8);

  sm_config_set_fifo_join(&config, PIO_FIFO_JOIN_NONE);
  sm_config_set_sideset_pins(&config, 26);

  //sm_config_set_clkdiv(&config, 8);

  // 3. Apply the configuration & activate the State Machine
  pio_sm_init(pio, sm, offset, &config);
  //pio_sm_set_enabled(pio, sm, true);
}
%}