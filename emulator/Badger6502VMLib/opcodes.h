#pragma once
#include "stdint.h"
#include <stdio.h>
#include <stdlib.h>
#include <cstring>
#include "badgervmpal.h"

enum opcodes
{
	BRK_STACK		= 0x00,
	ORA_I_ZP_X		= 0x01,
	TSB_ZP			= 0x04,
	ORA_ZP			= 0x05,
	ASL_ZP			= 0x06,
	RMB0            = 0x07,
	PHP_STACK		= 0x08,
	ORA_IMM			= 0x09,
	ASL_A			= 0x0A,
	TSB_ABS         = 0x0C,
	ORA_ABS			= 0x0D,
	ASL_ABS			= 0x0E,
	BBR0            = 0x0F,
	BPL				= 0x10,
	ORA_I_ZP_Y		= 0x11,
    ORA_I_ZP        = 0x12,
	TRB_ZP          = 0x14,
	ORA_ZP_X		= 0x15,
	ASL_ZP_X		= 0x16,
	RMB1            = 0x17,
	CLC				= 0x18,
	ORA_ABS_Y		= 0x19,
	INC_A           = 0x1A,
	TRB_ABS         = 0x1C,
	ORA_ABS_X		= 0x1D,
	ASL_ABS_X		= 0x1E,
	BBR1            = 0x1F,
	JSR_ABS			= 0x20,
	AND_I_ZP_X		= 0x21,
	BIT_ZP			= 0x24,
	AND_ZP			= 0x25,
	ROL_ZP			= 0x26,
	RMB2            = 0x27,
	PLP_STACK		= 0x28,
	AND_IMM			= 0x29,
	ROL_A			= 0x2A,
	BIT_ABS			= 0x2C,
	AND_ABS			= 0x2D,
	ROL_ABS			= 0x2E,
	BBR2            = 0x2F,
	BMI				= 0x30,
	AND_I_ZP_Y		= 0x31,
	AND_I_ZP        = 0x32,
	BIT_ZP_X        = 0x34,
	AND_ZP_X		= 0x35,
	ROL_ZP_X		= 0x36,
	RMB3            = 0x37,
	SEC				= 0x38,
	AND_ABS_Y		= 0x39,
	DEC             = 0x3A,
	BIT_ABS_X       = 0x3C,
	AND_ABS_X		= 0x3D,
	ROL_ABS_X		= 0x3E,
	BBR3            = 0x3F,
	RTI_STACK		= 0x40,
	EOR_I_ZP_X		= 0x41,
	EOR_ZP			= 0x45,
	LSR_ZP			= 0x46,
	RMB4            = 0x47,   
	PHA_STACK		= 0x48,
	EOR_IMM			= 0x49,
	LSR_A			= 0x4A,
	JMP_ABS			= 0x4C,
	EOR_ABS			= 0x4D,
	LSR_ABS			= 0x4E,
	BBR4            = 0x4F,
	BVC				= 0x50,
	EOR_I_ZP_Y		= 0x51,
	EOR_I_ZP        = 0x52,
	EOR_ZP_X		= 0x55,
	LSR_ZP_X		= 0x56,
	RMB5            = 0x57,
	CLI				= 0x58,
	EOR_ABS_Y		= 0x59,
	PHY_STACK       = 0x5A,
	EOR_ABS_X		= 0x5D,
	LSR_ABS_X		= 0x5E,
	BBR5            = 0x5F,
	RTS_STACK		= 0x60,
	ADC_I_ZP_X		= 0x61,
	STZ_ZP          = 0x64,
	ADC_ZP			= 0x65,
	ROR_ZP			= 0x66,
	RMB6            = 0x67,
	PLA_STACK		= 0x68,
	ADC_IMM			= 0x69,
	ROR_A			= 0x6A,
	JMP_ABS_I		= 0x6C,
	ADC_ABS			= 0x6D,
	ROR_ABS			= 0x6E,
	BBR6            = 0x6F,
	BVS				= 0x70,
	ADC_I_ZP_Y		= 0x71,
	ADC_I_ZP        = 0x72,
	STZ_ZP_X        = 0x74,
	ADC_ZP_X		= 0x75,
	ROR_ZP_X		= 0x76,
	RMB7            = 0x77,
	SEI				= 0x78,
	ADC_ABS_Y		= 0x79,
	PLY_STACK       = 0x7A,
	JMP_I_X         = 0x7C,
	ADC_ABS_X		= 0x7D,
	ROR_ABS_X		= 0x7E,
	BBR7            = 0x7F,
	BRA             = 0x80,
	STA_I_ZP_X		= 0x81,
	STY_ZP			= 0x84,
	STA_ZP			= 0x85,
	STX_ZP			= 0x86,
	SMB0			= 0x87,
	DEY				= 0x88,
	BIT_IMM         = 0x89,
	TXA				= 0x8A,
	STY_ABS			= 0x8C,
	STA_ABS			= 0x8D,
	STX_ABS			= 0x8E,
	BBS0            = 0x8F,
	BCC				= 0x90,
	STA_I_ZP_Y		= 0x91,
	STA_I_ZP        = 0x92,
	STY_ZP_X		= 0x94,
	STA_ZP_X		= 0x95,
	STX_ZP_Y		= 0x96,
	SMB1            = 0x97,
	TYA				= 0x98,
	STA_ABS_Y		= 0x99,
	TXS				= 0x9A,
	STZ_ABS         = 0x9C,
	STA_ABS_X		= 0x9D,
	STZ_ABS_X       = 0x9E,
	BBS1            = 0x9F,
	LDY_IMM			= 0xA0,
	LDA_I_ZP_X		= 0xA1,
	LDX_IMM			= 0xA2,
	LDY_ZP			= 0xA4,
	LDA_ZP			= 0xA5,
	LDX_ZP			= 0xA6,
	SMB2            = 0xA7,
	TAY				= 0xA8,
	LDA_IMM			= 0xA9,
	TAX				= 0xAA,
	LDY_ABS			= 0xAC,
	LDA_ABS			= 0xAD,
	LDX_ABS			= 0xAE,
	BBS2            = 0xAF,
	BCS				= 0xB0,
	LDA_I_ZP_Y		= 0xB1,
	LDA_I_ZP        = 0xB2,
	LDY_ZP_X		= 0xB4,
	LDA_ZP_X		= 0xB5,
	LDX_ZP_Y		= 0xB6,
	SMB3            = 0xB7,
	CLV				= 0xB8,
	LDA_ABS_Y		= 0xB9,
	TSX				= 0xBA,
	LDY_ABS_X		= 0xBC,
	LDA_ABS_X		= 0xBD,
	LDX_ABS_Y		= 0xBE,
	BBS3            = 0xBF,
	CPY_IMM			= 0xC0,
	CMP_I_ZP_X		= 0xC1,
	CPY_ZP			= 0xC4,
	CMP_ZP			= 0xC5,
	DEC_ZP			= 0xC6,
	SMB4            = 0xC7,
	INY				= 0xC8,
	CMP_IMM			= 0xC9,
	DEX				= 0xCA,
	WAI             = 0xCB,
	CPY_ABS			= 0xCC,
	CMP_ABS			= 0xCD,
	DEC_ABS			= 0xCE,
	BBS4            = 0xCF,
	BNE				= 0xD0,
	CMP_I_ZP_Y		= 0xD1,
	CMP_I_ZP        = 0xD2,
	CMP_ZP_X		= 0xD5,
	DEC_ZP_X		= 0xD6,
	SMB5            = 0xD7,
	CLD				= 0xD8,
	CMP_ABS_Y		= 0xD9,
	PHX_STACK       = 0xDA,
	STP             = 0xDB,
	CMP_ABS_X		= 0xDD,
	DEC_ABS_X		= 0xDE,
	BBS5            = 0xDF,
	CPX_IMM			= 0xE0,
	SBC_I_ZP_X		= 0xE1,
	CPX_ZP			= 0xE4,
	SBC_ZP			= 0xE5,
	INC_ZP			= 0xE6,
	SMB6            = 0xE7,
	INX				= 0xE8,
	SBC_IMM			= 0xE9,
	NOP				= 0xEA,
	CPX_ABS			= 0xEC,
	SBC_ABS			= 0xED,
	INC_ABS			= 0xEE,
	BBS6            = 0xEF,
	BEQ				= 0xF0,
	SBC_I_ZP_Y		= 0xF1,
	SBC_I_ZP        = 0xF2,
	SBC_ZP_X		= 0xF5,
	INC_ZP_X		= 0xF6,
	SMB7            = 0xF7,
	SED				= 0xF8,
	SBC_ABS_Y		= 0xF9,
	PLX_STACK       = 0xFA,
	SBC_ABS_X		= 0xFD,
	INC_ABS_X		= 0xFE,
	BBS7            = 0xFF
};

enum AddressingMode
{
	Undefined,
	Absolute,								// a
	Absolute_Indexed_Indirect_With_X,		// (a,x)
	Absolute_Indexed_X,						// a,x
	Absolute_Indexed_Y,						// a,y
	Absolute_Indirect,						// (a)
	Accumulator,							// A
	Immediate,								// #
	Implied,								// i
	PC_Relative,							// r
	Stack,									// s
	ZeroPage,								// zp
	ZeroPage_Indexed_Indirect_With_X,		// (zp,x)
	ZeroPage_Indexed_With_X,				// zp,x
	ZeroPage_Indexed_With_Y,				// zp,y
	ZeroPage_Indirect,						// (zp)
	ZeroPage_Indirect_Indexed_With_Y		// (zp),y
};

struct InstructionInfo
{
	InstructionInfo() {};
	
	InstructionInfo(const char * itag, AddressingMode imode)
	{
		if (itag)
		{
 		   pal_strncpy(tag, itag, 0xA);
		}
		mode = imode;
	}

	char      tag[0x10] = {};
	AddressingMode	mode;
};